// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Keycloak.AuthServices.Sdk.Kiota.Admin.Models {
    #pragma warning disable CS1591
    public class CredentialRepresentation : IAdditionalDataHolder, IParsable 
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The algorithm property</summary>
        [Obsolete("")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Algorithm { get; set; }
#nullable restore
#else
        public string Algorithm { get; set; }
#endif
        /// <summary>The config property</summary>
        [Obsolete("")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public CredentialRepresentation_config? Config { get; set; }
#nullable restore
#else
        public CredentialRepresentation_config Config { get; set; }
#endif
        /// <summary>The counter property</summary>
        [Obsolete("")]
        public int? Counter { get; set; }
        /// <summary>The createdDate property</summary>
        public long? CreatedDate { get; set; }
        /// <summary>The credentialData property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CredentialData { get; set; }
#nullable restore
#else
        public string CredentialData { get; set; }
#endif
        /// <summary>The device property</summary>
        [Obsolete("")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Device { get; set; }
#nullable restore
#else
        public string Device { get; set; }
#endif
        /// <summary>The digits property</summary>
        [Obsolete("")]
        public int? Digits { get; set; }
        /// <summary>The hashedSaltedValue property</summary>
        [Obsolete("")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? HashedSaltedValue { get; set; }
#nullable restore
#else
        public string HashedSaltedValue { get; set; }
#endif
        /// <summary>The hashIterations property</summary>
        [Obsolete("")]
        public int? HashIterations { get; set; }
        /// <summary>The id property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>The period property</summary>
        [Obsolete("")]
        public int? Period { get; set; }
        /// <summary>The priority property</summary>
        public int? Priority { get; set; }
        /// <summary>The salt property</summary>
        [Obsolete("")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Salt { get; set; }
#nullable restore
#else
        public string Salt { get; set; }
#endif
        /// <summary>The secretData property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SecretData { get; set; }
#nullable restore
#else
        public string SecretData { get; set; }
#endif
        /// <summary>The temporary property</summary>
        public bool? Temporary { get; set; }
        /// <summary>The type property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Type { get; set; }
#nullable restore
#else
        public string Type { get; set; }
#endif
        /// <summary>The userLabel property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UserLabel { get; set; }
#nullable restore
#else
        public string UserLabel { get; set; }
#endif
        /// <summary>The value property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Value { get; set; }
#nullable restore
#else
        public string Value { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="CredentialRepresentation"/> and sets the default values.
        /// </summary>
        public CredentialRepresentation()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="CredentialRepresentation"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static CredentialRepresentation CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new CredentialRepresentation();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                {"algorithm", n => { Algorithm = n.GetStringValue(); } },
                {"config", n => { Config = n.GetObjectValue<CredentialRepresentation_config>(CredentialRepresentation_config.CreateFromDiscriminatorValue); } },
                {"counter", n => { Counter = n.GetIntValue(); } },
                {"createdDate", n => { CreatedDate = n.GetLongValue(); } },
                {"credentialData", n => { CredentialData = n.GetStringValue(); } },
                {"device", n => { Device = n.GetStringValue(); } },
                {"digits", n => { Digits = n.GetIntValue(); } },
                {"hashIterations", n => { HashIterations = n.GetIntValue(); } },
                {"hashedSaltedValue", n => { HashedSaltedValue = n.GetStringValue(); } },
                {"id", n => { Id = n.GetStringValue(); } },
                {"period", n => { Period = n.GetIntValue(); } },
                {"priority", n => { Priority = n.GetIntValue(); } },
                {"salt", n => { Salt = n.GetStringValue(); } },
                {"secretData", n => { SecretData = n.GetStringValue(); } },
                {"temporary", n => { Temporary = n.GetBoolValue(); } },
                {"type", n => { Type = n.GetStringValue(); } },
                {"userLabel", n => { UserLabel = n.GetStringValue(); } },
                {"value", n => { Value = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("algorithm", Algorithm);
            writer.WriteObjectValue<CredentialRepresentation_config>("config", Config);
            writer.WriteIntValue("counter", Counter);
            writer.WriteLongValue("createdDate", CreatedDate);
            writer.WriteStringValue("credentialData", CredentialData);
            writer.WriteStringValue("device", Device);
            writer.WriteIntValue("digits", Digits);
            writer.WriteStringValue("hashedSaltedValue", HashedSaltedValue);
            writer.WriteIntValue("hashIterations", HashIterations);
            writer.WriteStringValue("id", Id);
            writer.WriteIntValue("period", Period);
            writer.WriteIntValue("priority", Priority);
            writer.WriteStringValue("salt", Salt);
            writer.WriteStringValue("secretData", SecretData);
            writer.WriteBoolValue("temporary", Temporary);
            writer.WriteStringValue("type", Type);
            writer.WriteStringValue("userLabel", UserLabel);
            writer.WriteStringValue("value", Value);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
