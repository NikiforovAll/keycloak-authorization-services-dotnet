// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Keycloak.AuthServices.Sdk.Kiota.Admin.Models {
    [Obsolete("")]
    public class ClientTemplateRepresentation : IAdditionalDataHolder, IParsable {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The attributes property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public ClientTemplateRepresentation_attributes? Attributes { get; set; }
#nullable restore
#else
        public ClientTemplateRepresentation_attributes Attributes { get; set; }
#endif
        /// <summary>The bearerOnly property</summary>
        public bool? BearerOnly { get; set; }
        /// <summary>The consentRequired property</summary>
        public bool? ConsentRequired { get; set; }
        /// <summary>The description property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description { get; set; }
#nullable restore
#else
        public string Description { get; set; }
#endif
        /// <summary>The directAccessGrantsEnabled property</summary>
        public bool? DirectAccessGrantsEnabled { get; set; }
        /// <summary>The frontchannelLogout property</summary>
        public bool? FrontchannelLogout { get; set; }
        /// <summary>The fullScopeAllowed property</summary>
        public bool? FullScopeAllowed { get; set; }
        /// <summary>The id property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>The implicitFlowEnabled property</summary>
        public bool? ImplicitFlowEnabled { get; set; }
        /// <summary>The name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The protocol property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Protocol { get; set; }
#nullable restore
#else
        public string Protocol { get; set; }
#endif
        /// <summary>The protocolMappers property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<ProtocolMapperRepresentation>? ProtocolMappers { get; set; }
#nullable restore
#else
        public List<ProtocolMapperRepresentation> ProtocolMappers { get; set; }
#endif
        /// <summary>The publicClient property</summary>
        public bool? PublicClient { get; set; }
        /// <summary>The serviceAccountsEnabled property</summary>
        public bool? ServiceAccountsEnabled { get; set; }
        /// <summary>The standardFlowEnabled property</summary>
        public bool? StandardFlowEnabled { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="ClientTemplateRepresentation"/> and sets the default values.
        /// </summary>
        public ClientTemplateRepresentation() {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="ClientTemplateRepresentation"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static ClientTemplateRepresentation CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new ClientTemplateRepresentation();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"attributes", n => { Attributes = n.GetObjectValue<ClientTemplateRepresentation_attributes>(ClientTemplateRepresentation_attributes.CreateFromDiscriminatorValue); } },
                {"bearerOnly", n => { BearerOnly = n.GetBoolValue(); } },
                {"consentRequired", n => { ConsentRequired = n.GetBoolValue(); } },
                {"description", n => { Description = n.GetStringValue(); } },
                {"directAccessGrantsEnabled", n => { DirectAccessGrantsEnabled = n.GetBoolValue(); } },
                {"frontchannelLogout", n => { FrontchannelLogout = n.GetBoolValue(); } },
                {"fullScopeAllowed", n => { FullScopeAllowed = n.GetBoolValue(); } },
                {"id", n => { Id = n.GetStringValue(); } },
                {"implicitFlowEnabled", n => { ImplicitFlowEnabled = n.GetBoolValue(); } },
                {"name", n => { Name = n.GetStringValue(); } },
                {"protocol", n => { Protocol = n.GetStringValue(); } },
                {"protocolMappers", n => { ProtocolMappers = n.GetCollectionOfObjectValues<ProtocolMapperRepresentation>(ProtocolMapperRepresentation.CreateFromDiscriminatorValue)?.ToList(); } },
                {"publicClient", n => { PublicClient = n.GetBoolValue(); } },
                {"serviceAccountsEnabled", n => { ServiceAccountsEnabled = n.GetBoolValue(); } },
                {"standardFlowEnabled", n => { StandardFlowEnabled = n.GetBoolValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<ClientTemplateRepresentation_attributes>("attributes", Attributes);
            writer.WriteBoolValue("bearerOnly", BearerOnly);
            writer.WriteBoolValue("consentRequired", ConsentRequired);
            writer.WriteStringValue("description", Description);
            writer.WriteBoolValue("directAccessGrantsEnabled", DirectAccessGrantsEnabled);
            writer.WriteBoolValue("frontchannelLogout", FrontchannelLogout);
            writer.WriteBoolValue("fullScopeAllowed", FullScopeAllowed);
            writer.WriteStringValue("id", Id);
            writer.WriteBoolValue("implicitFlowEnabled", ImplicitFlowEnabled);
            writer.WriteStringValue("name", Name);
            writer.WriteStringValue("protocol", Protocol);
            writer.WriteCollectionOfObjectValues<ProtocolMapperRepresentation>("protocolMappers", ProtocolMappers);
            writer.WriteBoolValue("publicClient", PublicClient);
            writer.WriteBoolValue("serviceAccountsEnabled", ServiceAccountsEnabled);
            writer.WriteBoolValue("standardFlowEnabled", StandardFlowEnabled);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
