// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Keycloak.AuthServices.Sdk.Kiota.Admin.Models {
    #pragma warning disable CS1591
    public class IdentityProviderRepresentation : IAdditionalDataHolder, IParsable 
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The addReadTokenRoleOnCreate property</summary>
        public bool? AddReadTokenRoleOnCreate { get; set; }
        /// <summary>The alias property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Alias { get; set; }
#nullable restore
#else
        public string Alias { get; set; }
#endif
        /// <summary>The authenticateByDefault property</summary>
        public bool? AuthenticateByDefault { get; set; }
        /// <summary>The config property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public IdentityProviderRepresentation_config? Config { get; set; }
#nullable restore
#else
        public IdentityProviderRepresentation_config Config { get; set; }
#endif
        /// <summary>The displayName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DisplayName { get; set; }
#nullable restore
#else
        public string DisplayName { get; set; }
#endif
        /// <summary>The enabled property</summary>
        public bool? Enabled { get; set; }
        /// <summary>The firstBrokerLoginFlowAlias property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FirstBrokerLoginFlowAlias { get; set; }
#nullable restore
#else
        public string FirstBrokerLoginFlowAlias { get; set; }
#endif
        /// <summary>The internalId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? InternalId { get; set; }
#nullable restore
#else
        public string InternalId { get; set; }
#endif
        /// <summary>The linkOnly property</summary>
        public bool? LinkOnly { get; set; }
        /// <summary>The postBrokerLoginFlowAlias property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PostBrokerLoginFlowAlias { get; set; }
#nullable restore
#else
        public string PostBrokerLoginFlowAlias { get; set; }
#endif
        /// <summary>The providerId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ProviderId { get; set; }
#nullable restore
#else
        public string ProviderId { get; set; }
#endif
        /// <summary>The storeToken property</summary>
        public bool? StoreToken { get; set; }
        /// <summary>The trustEmail property</summary>
        public bool? TrustEmail { get; set; }
        /// <summary>The updateProfileFirstLogin property</summary>
        [Obsolete("")]
        public bool? UpdateProfileFirstLogin { get; set; }
        /// <summary>The updateProfileFirstLoginMode property</summary>
        [Obsolete("")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UpdateProfileFirstLoginMode { get; set; }
#nullable restore
#else
        public string UpdateProfileFirstLoginMode { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="IdentityProviderRepresentation"/> and sets the default values.
        /// </summary>
        public IdentityProviderRepresentation()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="IdentityProviderRepresentation"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static IdentityProviderRepresentation CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new IdentityProviderRepresentation();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                {"addReadTokenRoleOnCreate", n => { AddReadTokenRoleOnCreate = n.GetBoolValue(); } },
                {"alias", n => { Alias = n.GetStringValue(); } },
                {"authenticateByDefault", n => { AuthenticateByDefault = n.GetBoolValue(); } },
                {"config", n => { Config = n.GetObjectValue<IdentityProviderRepresentation_config>(IdentityProviderRepresentation_config.CreateFromDiscriminatorValue); } },
                {"displayName", n => { DisplayName = n.GetStringValue(); } },
                {"enabled", n => { Enabled = n.GetBoolValue(); } },
                {"firstBrokerLoginFlowAlias", n => { FirstBrokerLoginFlowAlias = n.GetStringValue(); } },
                {"internalId", n => { InternalId = n.GetStringValue(); } },
                {"linkOnly", n => { LinkOnly = n.GetBoolValue(); } },
                {"postBrokerLoginFlowAlias", n => { PostBrokerLoginFlowAlias = n.GetStringValue(); } },
                {"providerId", n => { ProviderId = n.GetStringValue(); } },
                {"storeToken", n => { StoreToken = n.GetBoolValue(); } },
                {"trustEmail", n => { TrustEmail = n.GetBoolValue(); } },
                {"updateProfileFirstLogin", n => { UpdateProfileFirstLogin = n.GetBoolValue(); } },
                {"updateProfileFirstLoginMode", n => { UpdateProfileFirstLoginMode = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("addReadTokenRoleOnCreate", AddReadTokenRoleOnCreate);
            writer.WriteStringValue("alias", Alias);
            writer.WriteBoolValue("authenticateByDefault", AuthenticateByDefault);
            writer.WriteObjectValue<IdentityProviderRepresentation_config>("config", Config);
            writer.WriteStringValue("displayName", DisplayName);
            writer.WriteBoolValue("enabled", Enabled);
            writer.WriteStringValue("firstBrokerLoginFlowAlias", FirstBrokerLoginFlowAlias);
            writer.WriteStringValue("internalId", InternalId);
            writer.WriteBoolValue("linkOnly", LinkOnly);
            writer.WriteStringValue("postBrokerLoginFlowAlias", PostBrokerLoginFlowAlias);
            writer.WriteStringValue("providerId", ProviderId);
            writer.WriteBoolValue("storeToken", StoreToken);
            writer.WriteBoolValue("trustEmail", TrustEmail);
            writer.WriteBoolValue("updateProfileFirstLogin", UpdateProfileFirstLogin);
            writer.WriteStringValue("updateProfileFirstLoginMode", UpdateProfileFirstLoginMode);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
