// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Keycloak.AuthServices.Sdk.Kiota.Admin.Models {
    public class ProtocolMapperEvaluationRepresentation : IAdditionalDataHolder, IParsable {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The containerId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ContainerId { get; set; }
#nullable restore
#else
        public string ContainerId { get; set; }
#endif
        /// <summary>The containerName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ContainerName { get; set; }
#nullable restore
#else
        public string ContainerName { get; set; }
#endif
        /// <summary>The containerType property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ContainerType { get; set; }
#nullable restore
#else
        public string ContainerType { get; set; }
#endif
        /// <summary>The mapperId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MapperId { get; set; }
#nullable restore
#else
        public string MapperId { get; set; }
#endif
        /// <summary>The mapperName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MapperName { get; set; }
#nullable restore
#else
        public string MapperName { get; set; }
#endif
        /// <summary>The protocolMapper property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ProtocolMapper { get; set; }
#nullable restore
#else
        public string ProtocolMapper { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="ProtocolMapperEvaluationRepresentation"/> and sets the default values.
        /// </summary>
        public ProtocolMapperEvaluationRepresentation() {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="ProtocolMapperEvaluationRepresentation"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static ProtocolMapperEvaluationRepresentation CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new ProtocolMapperEvaluationRepresentation();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"containerId", n => { ContainerId = n.GetStringValue(); } },
                {"containerName", n => { ContainerName = n.GetStringValue(); } },
                {"containerType", n => { ContainerType = n.GetStringValue(); } },
                {"mapperId", n => { MapperId = n.GetStringValue(); } },
                {"mapperName", n => { MapperName = n.GetStringValue(); } },
                {"protocolMapper", n => { ProtocolMapper = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("containerId", ContainerId);
            writer.WriteStringValue("containerName", ContainerName);
            writer.WriteStringValue("containerType", ContainerType);
            writer.WriteStringValue("mapperId", MapperId);
            writer.WriteStringValue("mapperName", MapperName);
            writer.WriteStringValue("protocolMapper", ProtocolMapper);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
