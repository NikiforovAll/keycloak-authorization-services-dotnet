// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Keycloak.AuthServices.Sdk.Kiota.Admin.Models {
    public class UserProfileAttributeGroupMetadata : IAdditionalDataHolder, IParsable {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The annotations property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public UserProfileAttributeGroupMetadata_annotations? Annotations { get; set; }
#nullable restore
#else
        public UserProfileAttributeGroupMetadata_annotations Annotations { get; set; }
#endif
        /// <summary>The displayDescription property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DisplayDescription { get; set; }
#nullable restore
#else
        public string DisplayDescription { get; set; }
#endif
        /// <summary>The displayHeader property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DisplayHeader { get; set; }
#nullable restore
#else
        public string DisplayHeader { get; set; }
#endif
        /// <summary>The name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="UserProfileAttributeGroupMetadata"/> and sets the default values.
        /// </summary>
        public UserProfileAttributeGroupMetadata() {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="UserProfileAttributeGroupMetadata"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static UserProfileAttributeGroupMetadata CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new UserProfileAttributeGroupMetadata();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"annotations", n => { Annotations = n.GetObjectValue<UserProfileAttributeGroupMetadata_annotations>(UserProfileAttributeGroupMetadata_annotations.CreateFromDiscriminatorValue); } },
                {"displayDescription", n => { DisplayDescription = n.GetStringValue(); } },
                {"displayHeader", n => { DisplayHeader = n.GetStringValue(); } },
                {"name", n => { Name = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<UserProfileAttributeGroupMetadata_annotations>("annotations", Annotations);
            writer.WriteStringValue("displayDescription", DisplayDescription);
            writer.WriteStringValue("displayHeader", DisplayHeader);
            writer.WriteStringValue("name", Name);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
