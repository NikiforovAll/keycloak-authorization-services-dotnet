// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Keycloak.AuthServices.Sdk.Kiota.Admin.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class ResourceServerRepresentation : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The allowRemoteResourceManagement property</summary>
        public bool? AllowRemoteResourceManagement { get; set; }
        /// <summary>The authorizationSchema property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Keycloak.AuthServices.Sdk.Kiota.Admin.Models.AuthorizationSchema? AuthorizationSchema { get; set; }
#nullable restore
#else
        public global::Keycloak.AuthServices.Sdk.Kiota.Admin.Models.AuthorizationSchema AuthorizationSchema { get; set; }
#endif
        /// <summary>The clientId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ClientId { get; set; }
#nullable restore
#else
        public string ClientId { get; set; }
#endif
        /// <summary>The decisionStrategy property</summary>
        public global::Keycloak.AuthServices.Sdk.Kiota.Admin.Models.DecisionStrategy? DecisionStrategy { get; set; }
        /// <summary>The id property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>The name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The policies property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Keycloak.AuthServices.Sdk.Kiota.Admin.Models.PolicyRepresentation>? Policies { get; set; }
#nullable restore
#else
        public List<global::Keycloak.AuthServices.Sdk.Kiota.Admin.Models.PolicyRepresentation> Policies { get; set; }
#endif
        /// <summary>The policyEnforcementMode property</summary>
        public global::Keycloak.AuthServices.Sdk.Kiota.Admin.Models.PolicyEnforcementMode? PolicyEnforcementMode { get; set; }
        /// <summary>The resources property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Keycloak.AuthServices.Sdk.Kiota.Admin.Models.ResourceRepresentation>? Resources { get; set; }
#nullable restore
#else
        public List<global::Keycloak.AuthServices.Sdk.Kiota.Admin.Models.ResourceRepresentation> Resources { get; set; }
#endif
        /// <summary>The scopes property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Keycloak.AuthServices.Sdk.Kiota.Admin.Models.ScopeRepresentation>? Scopes { get; set; }
#nullable restore
#else
        public List<global::Keycloak.AuthServices.Sdk.Kiota.Admin.Models.ScopeRepresentation> Scopes { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Keycloak.AuthServices.Sdk.Kiota.Admin.Models.ResourceServerRepresentation"/> and sets the default values.
        /// </summary>
        public ResourceServerRepresentation()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Keycloak.AuthServices.Sdk.Kiota.Admin.Models.ResourceServerRepresentation"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Keycloak.AuthServices.Sdk.Kiota.Admin.Models.ResourceServerRepresentation CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Keycloak.AuthServices.Sdk.Kiota.Admin.Models.ResourceServerRepresentation();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "allowRemoteResourceManagement", n => { AllowRemoteResourceManagement = n.GetBoolValue(); } },
                { "authorizationSchema", n => { AuthorizationSchema = n.GetObjectValue<global::Keycloak.AuthServices.Sdk.Kiota.Admin.Models.AuthorizationSchema>(global::Keycloak.AuthServices.Sdk.Kiota.Admin.Models.AuthorizationSchema.CreateFromDiscriminatorValue); } },
                { "clientId", n => { ClientId = n.GetStringValue(); } },
                { "decisionStrategy", n => { DecisionStrategy = n.GetEnumValue<global::Keycloak.AuthServices.Sdk.Kiota.Admin.Models.DecisionStrategy>(); } },
                { "id", n => { Id = n.GetStringValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "policies", n => { Policies = n.GetCollectionOfObjectValues<global::Keycloak.AuthServices.Sdk.Kiota.Admin.Models.PolicyRepresentation>(global::Keycloak.AuthServices.Sdk.Kiota.Admin.Models.PolicyRepresentation.CreateFromDiscriminatorValue)?.AsList(); } },
                { "policyEnforcementMode", n => { PolicyEnforcementMode = n.GetEnumValue<global::Keycloak.AuthServices.Sdk.Kiota.Admin.Models.PolicyEnforcementMode>(); } },
                { "resources", n => { Resources = n.GetCollectionOfObjectValues<global::Keycloak.AuthServices.Sdk.Kiota.Admin.Models.ResourceRepresentation>(global::Keycloak.AuthServices.Sdk.Kiota.Admin.Models.ResourceRepresentation.CreateFromDiscriminatorValue)?.AsList(); } },
                { "scopes", n => { Scopes = n.GetCollectionOfObjectValues<global::Keycloak.AuthServices.Sdk.Kiota.Admin.Models.ScopeRepresentation>(global::Keycloak.AuthServices.Sdk.Kiota.Admin.Models.ScopeRepresentation.CreateFromDiscriminatorValue)?.AsList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("allowRemoteResourceManagement", AllowRemoteResourceManagement);
            writer.WriteObjectValue<global::Keycloak.AuthServices.Sdk.Kiota.Admin.Models.AuthorizationSchema>("authorizationSchema", AuthorizationSchema);
            writer.WriteStringValue("clientId", ClientId);
            writer.WriteEnumValue<global::Keycloak.AuthServices.Sdk.Kiota.Admin.Models.DecisionStrategy>("decisionStrategy", DecisionStrategy);
            writer.WriteStringValue("id", Id);
            writer.WriteStringValue("name", Name);
            writer.WriteCollectionOfObjectValues<global::Keycloak.AuthServices.Sdk.Kiota.Admin.Models.PolicyRepresentation>("policies", Policies);
            writer.WriteEnumValue<global::Keycloak.AuthServices.Sdk.Kiota.Admin.Models.PolicyEnforcementMode>("policyEnforcementMode", PolicyEnforcementMode);
            writer.WriteCollectionOfObjectValues<global::Keycloak.AuthServices.Sdk.Kiota.Admin.Models.ResourceRepresentation>("resources", Resources);
            writer.WriteCollectionOfObjectValues<global::Keycloak.AuthServices.Sdk.Kiota.Admin.Models.ScopeRepresentation>("scopes", Scopes);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
