// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Keycloak.AuthServices.Sdk.Kiota.Admin.Models {
    public class EvaluationResultRepresentation : IAdditionalDataHolder, IParsable {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The allowedScopes property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<ScopeRepresentation>? AllowedScopes { get; set; }
#nullable restore
#else
        public List<ScopeRepresentation> AllowedScopes { get; set; }
#endif
        /// <summary>The policies property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<PolicyResultRepresentation>? Policies { get; set; }
#nullable restore
#else
        public List<PolicyResultRepresentation> Policies { get; set; }
#endif
        /// <summary>The resource property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public ResourceRepresentation? Resource { get; set; }
#nullable restore
#else
        public ResourceRepresentation Resource { get; set; }
#endif
        /// <summary>The scopes property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<ScopeRepresentation>? Scopes { get; set; }
#nullable restore
#else
        public List<ScopeRepresentation> Scopes { get; set; }
#endif
        /// <summary>The status property</summary>
        public DecisionEffect? Status { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="EvaluationResultRepresentation"/> and sets the default values.
        /// </summary>
        public EvaluationResultRepresentation() {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="EvaluationResultRepresentation"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static EvaluationResultRepresentation CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new EvaluationResultRepresentation();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"allowedScopes", n => { AllowedScopes = n.GetCollectionOfObjectValues<ScopeRepresentation>(ScopeRepresentation.CreateFromDiscriminatorValue)?.ToList(); } },
                {"policies", n => { Policies = n.GetCollectionOfObjectValues<PolicyResultRepresentation>(PolicyResultRepresentation.CreateFromDiscriminatorValue)?.ToList(); } },
                {"resource", n => { Resource = n.GetObjectValue<ResourceRepresentation>(ResourceRepresentation.CreateFromDiscriminatorValue); } },
                {"scopes", n => { Scopes = n.GetCollectionOfObjectValues<ScopeRepresentation>(ScopeRepresentation.CreateFromDiscriminatorValue)?.ToList(); } },
                {"status", n => { Status = n.GetEnumValue<DecisionEffect>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfObjectValues<ScopeRepresentation>("allowedScopes", AllowedScopes);
            writer.WriteCollectionOfObjectValues<PolicyResultRepresentation>("policies", Policies);
            writer.WriteObjectValue<ResourceRepresentation>("resource", Resource);
            writer.WriteCollectionOfObjectValues<ScopeRepresentation>("scopes", Scopes);
            writer.WriteEnumValue<DecisionEffect>("status", Status);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
