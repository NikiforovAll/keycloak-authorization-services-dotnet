// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Keycloak.AuthServices.Sdk.Kiota.Admin.Models {
    public class UserProfileAttributeMetadata : IAdditionalDataHolder, IParsable {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The annotations property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public UserProfileAttributeMetadata_annotations? Annotations { get; set; }
#nullable restore
#else
        public UserProfileAttributeMetadata_annotations Annotations { get; set; }
#endif
        /// <summary>The displayName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DisplayName { get; set; }
#nullable restore
#else
        public string DisplayName { get; set; }
#endif
        /// <summary>The group property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Group { get; set; }
#nullable restore
#else
        public string Group { get; set; }
#endif
        /// <summary>The multivalued property</summary>
        public bool? Multivalued { get; set; }
        /// <summary>The name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The readOnly property</summary>
        public bool? ReadOnly { get; set; }
        /// <summary>The required property</summary>
        public bool? Required { get; set; }
        /// <summary>The validators property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public UserProfileAttributeMetadata_validators? Validators { get; set; }
#nullable restore
#else
        public UserProfileAttributeMetadata_validators Validators { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="UserProfileAttributeMetadata"/> and sets the default values.
        /// </summary>
        public UserProfileAttributeMetadata() {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="UserProfileAttributeMetadata"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static UserProfileAttributeMetadata CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new UserProfileAttributeMetadata();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"annotations", n => { Annotations = n.GetObjectValue<UserProfileAttributeMetadata_annotations>(UserProfileAttributeMetadata_annotations.CreateFromDiscriminatorValue); } },
                {"displayName", n => { DisplayName = n.GetStringValue(); } },
                {"group", n => { Group = n.GetStringValue(); } },
                {"multivalued", n => { Multivalued = n.GetBoolValue(); } },
                {"name", n => { Name = n.GetStringValue(); } },
                {"readOnly", n => { ReadOnly = n.GetBoolValue(); } },
                {"required", n => { Required = n.GetBoolValue(); } },
                {"validators", n => { Validators = n.GetObjectValue<UserProfileAttributeMetadata_validators>(UserProfileAttributeMetadata_validators.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<UserProfileAttributeMetadata_annotations>("annotations", Annotations);
            writer.WriteStringValue("displayName", DisplayName);
            writer.WriteStringValue("group", Group);
            writer.WriteBoolValue("multivalued", Multivalued);
            writer.WriteStringValue("name", Name);
            writer.WriteBoolValue("readOnly", ReadOnly);
            writer.WriteBoolValue("required", Required);
            writer.WriteObjectValue<UserProfileAttributeMetadata_validators>("validators", Validators);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
