// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Keycloak.AuthServices.Sdk.Kiota.Admin.Models {
    #pragma warning disable CS1591
    public class ClientRepresentation : IAdditionalDataHolder, IParsable 
    #pragma warning restore CS1591
    {
        /// <summary>The access property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public ClientRepresentation_access? Access { get; set; }
#nullable restore
#else
        public ClientRepresentation_access Access { get; set; }
#endif
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The adminUrl property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AdminUrl { get; set; }
#nullable restore
#else
        public string AdminUrl { get; set; }
#endif
        /// <summary>The alwaysDisplayInConsole property</summary>
        public bool? AlwaysDisplayInConsole { get; set; }
        /// <summary>The attributes property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public ClientRepresentation_attributes? Attributes { get; set; }
#nullable restore
#else
        public ClientRepresentation_attributes Attributes { get; set; }
#endif
        /// <summary>The authenticationFlowBindingOverrides property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public ClientRepresentation_authenticationFlowBindingOverrides? AuthenticationFlowBindingOverrides { get; set; }
#nullable restore
#else
        public ClientRepresentation_authenticationFlowBindingOverrides AuthenticationFlowBindingOverrides { get; set; }
#endif
        /// <summary>The authorizationServicesEnabled property</summary>
        public bool? AuthorizationServicesEnabled { get; set; }
        /// <summary>The authorizationSettings property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public ResourceServerRepresentation? AuthorizationSettings { get; set; }
#nullable restore
#else
        public ResourceServerRepresentation AuthorizationSettings { get; set; }
#endif
        /// <summary>The baseUrl property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BaseUrl { get; set; }
#nullable restore
#else
        public string BaseUrl { get; set; }
#endif
        /// <summary>The bearerOnly property</summary>
        public bool? BearerOnly { get; set; }
        /// <summary>The clientAuthenticatorType property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ClientAuthenticatorType { get; set; }
#nullable restore
#else
        public string ClientAuthenticatorType { get; set; }
#endif
        /// <summary>The clientId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ClientId { get; set; }
#nullable restore
#else
        public string ClientId { get; set; }
#endif
        /// <summary>The clientTemplate property</summary>
        [Obsolete("")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ClientTemplate { get; set; }
#nullable restore
#else
        public string ClientTemplate { get; set; }
#endif
        /// <summary>The consentRequired property</summary>
        public bool? ConsentRequired { get; set; }
        /// <summary>The defaultClientScopes property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? DefaultClientScopes { get; set; }
#nullable restore
#else
        public List<string> DefaultClientScopes { get; set; }
#endif
        /// <summary>The defaultRoles property</summary>
        [Obsolete("")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? DefaultRoles { get; set; }
#nullable restore
#else
        public List<string> DefaultRoles { get; set; }
#endif
        /// <summary>The description property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description { get; set; }
#nullable restore
#else
        public string Description { get; set; }
#endif
        /// <summary>The directAccessGrantsEnabled property</summary>
        public bool? DirectAccessGrantsEnabled { get; set; }
        /// <summary>The directGrantsOnly property</summary>
        [Obsolete("")]
        public bool? DirectGrantsOnly { get; set; }
        /// <summary>The enabled property</summary>
        public bool? Enabled { get; set; }
        /// <summary>The frontchannelLogout property</summary>
        public bool? FrontchannelLogout { get; set; }
        /// <summary>The fullScopeAllowed property</summary>
        public bool? FullScopeAllowed { get; set; }
        /// <summary>The id property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>The implicitFlowEnabled property</summary>
        public bool? ImplicitFlowEnabled { get; set; }
        /// <summary>The name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The nodeReRegistrationTimeout property</summary>
        public int? NodeReRegistrationTimeout { get; set; }
        /// <summary>The notBefore property</summary>
        public int? NotBefore { get; set; }
        /// <summary>The optionalClientScopes property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? OptionalClientScopes { get; set; }
#nullable restore
#else
        public List<string> OptionalClientScopes { get; set; }
#endif
        /// <summary>The origin property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Origin { get; set; }
#nullable restore
#else
        public string Origin { get; set; }
#endif
        /// <summary>The protocol property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Protocol { get; set; }
#nullable restore
#else
        public string Protocol { get; set; }
#endif
        /// <summary>The protocolMappers property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<ProtocolMapperRepresentation>? ProtocolMappers { get; set; }
#nullable restore
#else
        public List<ProtocolMapperRepresentation> ProtocolMappers { get; set; }
#endif
        /// <summary>The publicClient property</summary>
        public bool? PublicClient { get; set; }
        /// <summary>The redirectUris property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? RedirectUris { get; set; }
#nullable restore
#else
        public List<string> RedirectUris { get; set; }
#endif
        /// <summary>The registeredNodes property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public ClientRepresentation_registeredNodes? RegisteredNodes { get; set; }
#nullable restore
#else
        public ClientRepresentation_registeredNodes RegisteredNodes { get; set; }
#endif
        /// <summary>The registrationAccessToken property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RegistrationAccessToken { get; set; }
#nullable restore
#else
        public string RegistrationAccessToken { get; set; }
#endif
        /// <summary>The rootUrl property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RootUrl { get; set; }
#nullable restore
#else
        public string RootUrl { get; set; }
#endif
        /// <summary>The secret property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Secret { get; set; }
#nullable restore
#else
        public string Secret { get; set; }
#endif
        /// <summary>The serviceAccountsEnabled property</summary>
        public bool? ServiceAccountsEnabled { get; set; }
        /// <summary>The standardFlowEnabled property</summary>
        public bool? StandardFlowEnabled { get; set; }
        /// <summary>The surrogateAuthRequired property</summary>
        public bool? SurrogateAuthRequired { get; set; }
        /// <summary>The useTemplateConfig property</summary>
        [Obsolete("")]
        public bool? UseTemplateConfig { get; set; }
        /// <summary>The useTemplateMappers property</summary>
        [Obsolete("")]
        public bool? UseTemplateMappers { get; set; }
        /// <summary>The useTemplateScope property</summary>
        [Obsolete("")]
        public bool? UseTemplateScope { get; set; }
        /// <summary>The webOrigins property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? WebOrigins { get; set; }
#nullable restore
#else
        public List<string> WebOrigins { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="ClientRepresentation"/> and sets the default values.
        /// </summary>
        public ClientRepresentation()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="ClientRepresentation"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static ClientRepresentation CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new ClientRepresentation();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                {"access", n => { Access = n.GetObjectValue<ClientRepresentation_access>(ClientRepresentation_access.CreateFromDiscriminatorValue); } },
                {"adminUrl", n => { AdminUrl = n.GetStringValue(); } },
                {"alwaysDisplayInConsole", n => { AlwaysDisplayInConsole = n.GetBoolValue(); } },
                {"attributes", n => { Attributes = n.GetObjectValue<ClientRepresentation_attributes>(ClientRepresentation_attributes.CreateFromDiscriminatorValue); } },
                {"authenticationFlowBindingOverrides", n => { AuthenticationFlowBindingOverrides = n.GetObjectValue<ClientRepresentation_authenticationFlowBindingOverrides>(ClientRepresentation_authenticationFlowBindingOverrides.CreateFromDiscriminatorValue); } },
                {"authorizationServicesEnabled", n => { AuthorizationServicesEnabled = n.GetBoolValue(); } },
                {"authorizationSettings", n => { AuthorizationSettings = n.GetObjectValue<ResourceServerRepresentation>(ResourceServerRepresentation.CreateFromDiscriminatorValue); } },
                {"baseUrl", n => { BaseUrl = n.GetStringValue(); } },
                {"bearerOnly", n => { BearerOnly = n.GetBoolValue(); } },
                {"clientAuthenticatorType", n => { ClientAuthenticatorType = n.GetStringValue(); } },
                {"clientId", n => { ClientId = n.GetStringValue(); } },
                {"clientTemplate", n => { ClientTemplate = n.GetStringValue(); } },
                {"consentRequired", n => { ConsentRequired = n.GetBoolValue(); } },
                {"defaultClientScopes", n => { DefaultClientScopes = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
                {"defaultRoles", n => { DefaultRoles = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
                {"description", n => { Description = n.GetStringValue(); } },
                {"directAccessGrantsEnabled", n => { DirectAccessGrantsEnabled = n.GetBoolValue(); } },
                {"directGrantsOnly", n => { DirectGrantsOnly = n.GetBoolValue(); } },
                {"enabled", n => { Enabled = n.GetBoolValue(); } },
                {"frontchannelLogout", n => { FrontchannelLogout = n.GetBoolValue(); } },
                {"fullScopeAllowed", n => { FullScopeAllowed = n.GetBoolValue(); } },
                {"id", n => { Id = n.GetStringValue(); } },
                {"implicitFlowEnabled", n => { ImplicitFlowEnabled = n.GetBoolValue(); } },
                {"name", n => { Name = n.GetStringValue(); } },
                {"nodeReRegistrationTimeout", n => { NodeReRegistrationTimeout = n.GetIntValue(); } },
                {"notBefore", n => { NotBefore = n.GetIntValue(); } },
                {"optionalClientScopes", n => { OptionalClientScopes = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
                {"origin", n => { Origin = n.GetStringValue(); } },
                {"protocol", n => { Protocol = n.GetStringValue(); } },
                {"protocolMappers", n => { ProtocolMappers = n.GetCollectionOfObjectValues<ProtocolMapperRepresentation>(ProtocolMapperRepresentation.CreateFromDiscriminatorValue)?.ToList(); } },
                {"publicClient", n => { PublicClient = n.GetBoolValue(); } },
                {"redirectUris", n => { RedirectUris = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
                {"registeredNodes", n => { RegisteredNodes = n.GetObjectValue<ClientRepresentation_registeredNodes>(ClientRepresentation_registeredNodes.CreateFromDiscriminatorValue); } },
                {"registrationAccessToken", n => { RegistrationAccessToken = n.GetStringValue(); } },
                {"rootUrl", n => { RootUrl = n.GetStringValue(); } },
                {"secret", n => { Secret = n.GetStringValue(); } },
                {"serviceAccountsEnabled", n => { ServiceAccountsEnabled = n.GetBoolValue(); } },
                {"standardFlowEnabled", n => { StandardFlowEnabled = n.GetBoolValue(); } },
                {"surrogateAuthRequired", n => { SurrogateAuthRequired = n.GetBoolValue(); } },
                {"useTemplateConfig", n => { UseTemplateConfig = n.GetBoolValue(); } },
                {"useTemplateMappers", n => { UseTemplateMappers = n.GetBoolValue(); } },
                {"useTemplateScope", n => { UseTemplateScope = n.GetBoolValue(); } },
                {"webOrigins", n => { WebOrigins = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<ClientRepresentation_access>("access", Access);
            writer.WriteStringValue("adminUrl", AdminUrl);
            writer.WriteBoolValue("alwaysDisplayInConsole", AlwaysDisplayInConsole);
            writer.WriteObjectValue<ClientRepresentation_attributes>("attributes", Attributes);
            writer.WriteObjectValue<ClientRepresentation_authenticationFlowBindingOverrides>("authenticationFlowBindingOverrides", AuthenticationFlowBindingOverrides);
            writer.WriteBoolValue("authorizationServicesEnabled", AuthorizationServicesEnabled);
            writer.WriteObjectValue<ResourceServerRepresentation>("authorizationSettings", AuthorizationSettings);
            writer.WriteStringValue("baseUrl", BaseUrl);
            writer.WriteBoolValue("bearerOnly", BearerOnly);
            writer.WriteStringValue("clientAuthenticatorType", ClientAuthenticatorType);
            writer.WriteStringValue("clientId", ClientId);
            writer.WriteStringValue("clientTemplate", ClientTemplate);
            writer.WriteBoolValue("consentRequired", ConsentRequired);
            writer.WriteCollectionOfPrimitiveValues<string>("defaultClientScopes", DefaultClientScopes);
            writer.WriteCollectionOfPrimitiveValues<string>("defaultRoles", DefaultRoles);
            writer.WriteStringValue("description", Description);
            writer.WriteBoolValue("directAccessGrantsEnabled", DirectAccessGrantsEnabled);
            writer.WriteBoolValue("directGrantsOnly", DirectGrantsOnly);
            writer.WriteBoolValue("enabled", Enabled);
            writer.WriteBoolValue("frontchannelLogout", FrontchannelLogout);
            writer.WriteBoolValue("fullScopeAllowed", FullScopeAllowed);
            writer.WriteStringValue("id", Id);
            writer.WriteBoolValue("implicitFlowEnabled", ImplicitFlowEnabled);
            writer.WriteStringValue("name", Name);
            writer.WriteIntValue("nodeReRegistrationTimeout", NodeReRegistrationTimeout);
            writer.WriteIntValue("notBefore", NotBefore);
            writer.WriteCollectionOfPrimitiveValues<string>("optionalClientScopes", OptionalClientScopes);
            writer.WriteStringValue("origin", Origin);
            writer.WriteStringValue("protocol", Protocol);
            writer.WriteCollectionOfObjectValues<ProtocolMapperRepresentation>("protocolMappers", ProtocolMappers);
            writer.WriteBoolValue("publicClient", PublicClient);
            writer.WriteCollectionOfPrimitiveValues<string>("redirectUris", RedirectUris);
            writer.WriteObjectValue<ClientRepresentation_registeredNodes>("registeredNodes", RegisteredNodes);
            writer.WriteStringValue("registrationAccessToken", RegistrationAccessToken);
            writer.WriteStringValue("rootUrl", RootUrl);
            writer.WriteStringValue("secret", Secret);
            writer.WriteBoolValue("serviceAccountsEnabled", ServiceAccountsEnabled);
            writer.WriteBoolValue("standardFlowEnabled", StandardFlowEnabled);
            writer.WriteBoolValue("surrogateAuthRequired", SurrogateAuthRequired);
            writer.WriteBoolValue("useTemplateConfig", UseTemplateConfig);
            writer.WriteBoolValue("useTemplateMappers", UseTemplateMappers);
            writer.WriteBoolValue("useTemplateScope", UseTemplateScope);
            writer.WriteCollectionOfPrimitiveValues<string>("webOrigins", WebOrigins);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
