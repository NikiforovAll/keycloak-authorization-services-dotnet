// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using PhaseTwo.AuthServices.Sdk.Kiota.Admin.Admin.Webhooks.Count;
using PhaseTwo.AuthServices.Sdk.Kiota.Admin.Admin.Webhooks.Item;
using PhaseTwo.AuthServices.Sdk.Kiota.Admin.Admin.Webhooks.Payload;
using PhaseTwo.AuthServices.Sdk.Kiota.Admin.Admin.Webhooks.Sends;
using PhaseTwo.AuthServices.Sdk.Kiota.Admin.Models;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace PhaseTwo.AuthServices.Sdk.Kiota.Admin.Admin.Webhooks
{
    using Item;

    /// <summary>
    /// Builds and executes requests for operations under \{realm}\webhooks
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class WebhooksRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The count property</summary>
        public global::PhaseTwo.AuthServices.Sdk.Kiota.Admin.Admin.Webhooks.Count.CountRequestBuilder Count
        {
            get => new global::PhaseTwo.AuthServices.Sdk.Kiota.Admin.Admin.Webhooks.Count.CountRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The payload property</summary>
        public global::PhaseTwo.AuthServices.Sdk.Kiota.Admin.Admin.Webhooks.Payload.PayloadRequestBuilder Payload
        {
            get => new global::PhaseTwo.AuthServices.Sdk.Kiota.Admin.Admin.Webhooks.Payload.PayloadRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The sends property</summary>
        public global::PhaseTwo.AuthServices.Sdk.Kiota.Admin.Admin.Webhooks.Sends.SendsRequestBuilder Sends
        {
            get => new global::PhaseTwo.AuthServices.Sdk.Kiota.Admin.Admin.Webhooks.Sends.SendsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Gets an item from the PhaseTwo.AuthServices.Sdk.Kiota.Admin.item.webhooks.item collection</summary>
        /// <param name="position">webhook id</param>
        /// <returns>A <see cref="WithWebhookItemRequestBuilder"/></returns>
        public global::PhaseTwo.AuthServices.Sdk.Kiota.Admin.Admin.Webhooks.Item.WithWebhookItemRequestBuilder this[string position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("webhookId", position);
                return new global::PhaseTwo.AuthServices.Sdk.Kiota.Admin.Admin.Webhooks.Item.WithWebhookItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="WebhooksRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WebhooksRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/{realm}/webhooks{?first*,max*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="WebhooksRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WebhooksRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/{realm}/webhooks{?first*,max*}", rawUrl)
        {
        }
        /// <summary>
        /// Get a list of webhooks for this realm
        /// </summary>
        /// <returns>A List&lt;global::PhaseTwo.AuthServices.Sdk.Kiota.Admin.Models.WebhookRepresentation&gt;</returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<List<global::PhaseTwo.AuthServices.Sdk.Kiota.Admin.Models.WebhookRepresentation>?> GetAsync(Action<RequestConfiguration<global::PhaseTwo.AuthServices.Sdk.Kiota.Admin.Admin.Webhooks.WebhooksRequestBuilder.WebhooksRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<List<global::PhaseTwo.AuthServices.Sdk.Kiota.Admin.Models.WebhookRepresentation>> GetAsync(Action<RequestConfiguration<global::PhaseTwo.AuthServices.Sdk.Kiota.Admin.Item.Webhooks.WebhooksRequestBuilder.WebhooksRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var collectionResult = await RequestAdapter.SendCollectionAsync<global::PhaseTwo.AuthServices.Sdk.Kiota.Admin.Models.WebhookRepresentation>(requestInfo, global::PhaseTwo.AuthServices.Sdk.Kiota.Admin.Models.WebhookRepresentation.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
            return collectionResult?.AsList();
        }
        /// <summary>
        /// Create a new webhook
        /// </summary>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task PostAsync(global::PhaseTwo.AuthServices.Sdk.Kiota.Admin.Models.WebhookRepresentation body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task PostAsync(global::PhaseTwo.AuthServices.Sdk.Kiota.Admin.Models.WebhookRepresentation body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            await RequestAdapter.SendNoContentAsync(requestInfo, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Get a list of webhooks for this realm
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::PhaseTwo.AuthServices.Sdk.Kiota.Admin.Admin.Webhooks.WebhooksRequestBuilder.WebhooksRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::PhaseTwo.AuthServices.Sdk.Kiota.Admin.Item.Webhooks.WebhooksRequestBuilder.WebhooksRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Create a new webhook
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::PhaseTwo.AuthServices.Sdk.Kiota.Admin.Models.WebhookRepresentation body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::PhaseTwo.AuthServices.Sdk.Kiota.Admin.Models.WebhookRepresentation body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="WebhooksRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::PhaseTwo.AuthServices.Sdk.Kiota.Admin.Admin.Webhooks.WebhooksRequestBuilder WithUrl(string rawUrl)
        {
            return new global::PhaseTwo.AuthServices.Sdk.Kiota.Admin.Admin.Webhooks.WebhooksRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Get a list of webhooks for this realm
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WebhooksRequestBuilderGetQueryParameters 
        {
            [QueryParameter("first")]
            public int? First { get; set; }
            [QueryParameter("max")]
            public int? Max { get; set; }
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WebhooksRequestBuilderGetRequestConfiguration : RequestConfiguration<global::PhaseTwo.AuthServices.Sdk.Kiota.Admin.Admin.Webhooks.WebhooksRequestBuilder.WebhooksRequestBuilderGetQueryParameters>
        {
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WebhooksRequestBuilderPostRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618
