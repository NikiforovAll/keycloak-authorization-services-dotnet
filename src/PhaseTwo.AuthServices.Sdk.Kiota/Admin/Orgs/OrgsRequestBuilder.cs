// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using PhaseTwo.AuthServices.Sdk.Kiota.Admin.Admin.Orgs.Count;
using PhaseTwo.AuthServices.Sdk.Kiota.Admin.Admin.Orgs.Item;
using PhaseTwo.AuthServices.Sdk.Kiota.Admin.Admin.Orgs.Me;
using PhaseTwo.AuthServices.Sdk.Kiota.Admin.Models;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace PhaseTwo.AuthServices.Sdk.Kiota.Admin.Admin.Orgs
{
    using Item;

    /// <summary>
    /// Builds and executes requests for operations under \{realm}\orgs
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class OrgsRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The count property</summary>
        public global::PhaseTwo.AuthServices.Sdk.Kiota.Admin.Admin.Orgs.Count.CountRequestBuilder Count
        {
            get => new global::PhaseTwo.AuthServices.Sdk.Kiota.Admin.Admin.Orgs.Count.CountRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The me property</summary>
        public global::PhaseTwo.AuthServices.Sdk.Kiota.Admin.Admin.Orgs.Me.MeRequestBuilder Me
        {
            get => new global::PhaseTwo.AuthServices.Sdk.Kiota.Admin.Admin.Orgs.Me.MeRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Gets an item from the PhaseTwo.AuthServices.Sdk.Kiota.Admin.item.orgs.item collection</summary>
        /// <param name="position">organization id</param>
        /// <returns>A <see cref="WithOrgItemRequestBuilder"/></returns>
        public global::PhaseTwo.AuthServices.Sdk.Kiota.Admin.Admin.Orgs.Item.WithOrgItemRequestBuilder this[string position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("orgId", position);
                return new global::PhaseTwo.AuthServices.Sdk.Kiota.Admin.Admin.Orgs.Item.WithOrgItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="OrgsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public OrgsRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/{realm}/orgs{?first*,max*,q*,search*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="OrgsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public OrgsRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/{realm}/orgs{?first*,max*,q*,search*}", rawUrl)
        {
        }
        /// <summary>
        /// Get a paginated list of organizations using optional search query parameters.
        /// </summary>
        /// <returns>A List&lt;global::PhaseTwo.AuthServices.Sdk.Kiota.Admin.Models.OrganizationRepresentation&gt;</returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<List<global::PhaseTwo.AuthServices.Sdk.Kiota.Admin.Models.OrganizationRepresentation>?> GetAsync(Action<RequestConfiguration<global::PhaseTwo.AuthServices.Sdk.Kiota.Admin.Admin.Orgs.OrgsRequestBuilder.OrgsRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<List<global::PhaseTwo.AuthServices.Sdk.Kiota.Admin.Models.OrganizationRepresentation>> GetAsync(Action<RequestConfiguration<global::PhaseTwo.AuthServices.Sdk.Kiota.Admin.Item.Orgs.OrgsRequestBuilder.OrgsRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var collectionResult = await RequestAdapter.SendCollectionAsync<global::PhaseTwo.AuthServices.Sdk.Kiota.Admin.Models.OrganizationRepresentation>(requestInfo, global::PhaseTwo.AuthServices.Sdk.Kiota.Admin.Models.OrganizationRepresentation.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
            return collectionResult?.AsList();
        }
        /// <summary>
        /// Create a new organization
        /// </summary>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task PostAsync(global::PhaseTwo.AuthServices.Sdk.Kiota.Admin.Models.OrganizationRepresentation body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task PostAsync(global::PhaseTwo.AuthServices.Sdk.Kiota.Admin.Models.OrganizationRepresentation body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            await RequestAdapter.SendNoContentAsync(requestInfo, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Get a paginated list of organizations using optional search query parameters.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::PhaseTwo.AuthServices.Sdk.Kiota.Admin.Admin.Orgs.OrgsRequestBuilder.OrgsRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::PhaseTwo.AuthServices.Sdk.Kiota.Admin.Item.Orgs.OrgsRequestBuilder.OrgsRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Create a new organization
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::PhaseTwo.AuthServices.Sdk.Kiota.Admin.Models.OrganizationRepresentation body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::PhaseTwo.AuthServices.Sdk.Kiota.Admin.Models.OrganizationRepresentation body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="OrgsRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::PhaseTwo.AuthServices.Sdk.Kiota.Admin.Admin.Orgs.OrgsRequestBuilder WithUrl(string rawUrl)
        {
            return new global::PhaseTwo.AuthServices.Sdk.Kiota.Admin.Admin.Orgs.OrgsRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Get a paginated list of organizations using optional search query parameters.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class OrgsRequestBuilderGetQueryParameters 
        {
            [QueryParameter("first")]
            public int? First { get; set; }
            [QueryParameter("max")]
            public int? Max { get; set; }
            /// <summary>search by attributes using the format (space separated) `k1:v1 k2:v2`</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("q")]
            public string? Q { get; set; }
#nullable restore
#else
            [QueryParameter("q")]
            public string Q { get; set; }
#endif
            /// <summary>search by name</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("search")]
            public string? Search { get; set; }
#nullable restore
#else
            [QueryParameter("search")]
            public string Search { get; set; }
#endif
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class OrgsRequestBuilderGetRequestConfiguration : RequestConfiguration<global::PhaseTwo.AuthServices.Sdk.Kiota.Admin.Admin.Orgs.OrgsRequestBuilder.OrgsRequestBuilderGetQueryParameters>
        {
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class OrgsRequestBuilderPostRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618
