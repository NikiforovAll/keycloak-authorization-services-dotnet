// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using PhaseTwo.AuthServices.Sdk.Kiota.Admin.Admin.Orgs.Item.Domains;
using PhaseTwo.AuthServices.Sdk.Kiota.Admin.Admin.Orgs.Item.Idps;
using PhaseTwo.AuthServices.Sdk.Kiota.Admin.Admin.Orgs.Item.Invitations;
using PhaseTwo.AuthServices.Sdk.Kiota.Admin.Admin.Orgs.Item.Members;
using PhaseTwo.AuthServices.Sdk.Kiota.Admin.Admin.Orgs.Item.PortalLink;
using PhaseTwo.AuthServices.Sdk.Kiota.Admin.Admin.Orgs.Item.Roles;
using PhaseTwo.AuthServices.Sdk.Kiota.Admin.Models;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace PhaseTwo.AuthServices.Sdk.Kiota.Admin.Admin.Orgs.Item
{
    /// <summary>
    /// Builds and executes requests for operations under \{realm}\orgs\{orgId}
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class WithOrgItemRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The domains property</summary>
        public global::PhaseTwo.AuthServices.Sdk.Kiota.Admin.Admin.Orgs.Item.Domains.DomainsRequestBuilder Domains
        {
            get => new global::PhaseTwo.AuthServices.Sdk.Kiota.Admin.Admin.Orgs.Item.Domains.DomainsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The idps property</summary>
        public global::PhaseTwo.AuthServices.Sdk.Kiota.Admin.Admin.Orgs.Item.Idps.IdpsRequestBuilder Idps
        {
            get => new global::PhaseTwo.AuthServices.Sdk.Kiota.Admin.Admin.Orgs.Item.Idps.IdpsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The invitations property</summary>
        public global::PhaseTwo.AuthServices.Sdk.Kiota.Admin.Admin.Orgs.Item.Invitations.InvitationsRequestBuilder Invitations
        {
            get => new global::PhaseTwo.AuthServices.Sdk.Kiota.Admin.Admin.Orgs.Item.Invitations.InvitationsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The members property</summary>
        public global::PhaseTwo.AuthServices.Sdk.Kiota.Admin.Admin.Orgs.Item.Members.MembersRequestBuilder Members
        {
            get => new global::PhaseTwo.AuthServices.Sdk.Kiota.Admin.Admin.Orgs.Item.Members.MembersRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The portalLink property</summary>
        public global::PhaseTwo.AuthServices.Sdk.Kiota.Admin.Admin.Orgs.Item.PortalLink.PortalLinkRequestBuilder PortalLink
        {
            get => new global::PhaseTwo.AuthServices.Sdk.Kiota.Admin.Admin.Orgs.Item.PortalLink.PortalLinkRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The roles property</summary>
        public global::PhaseTwo.AuthServices.Sdk.Kiota.Admin.Admin.Orgs.Item.Roles.RolesRequestBuilder Roles
        {
            get => new global::PhaseTwo.AuthServices.Sdk.Kiota.Admin.Admin.Orgs.Item.Roles.RolesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new <see cref="WithOrgItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithOrgItemRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/{realm}/orgs/{orgId}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="WithOrgItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithOrgItemRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/{realm}/orgs/{orgId}", rawUrl)
        {
        }
        /// <summary>
        /// Delete the organization
        /// </summary>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task DeleteAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task DeleteAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToDeleteRequestInformation(requestConfiguration);
            await RequestAdapter.SendNoContentAsync(requestInfo, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Get organization by id
        /// </summary>
        /// <returns>A <see cref="global::PhaseTwo.AuthServices.Sdk.Kiota.Admin.Models.OrganizationRepresentation"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::PhaseTwo.AuthServices.Sdk.Kiota.Admin.Models.OrganizationRepresentation?> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::PhaseTwo.AuthServices.Sdk.Kiota.Admin.Models.OrganizationRepresentation> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::PhaseTwo.AuthServices.Sdk.Kiota.Admin.Models.OrganizationRepresentation>(requestInfo, global::PhaseTwo.AuthServices.Sdk.Kiota.Admin.Models.OrganizationRepresentation.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Update this organization by id
        /// </summary>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task PutAsync(global::PhaseTwo.AuthServices.Sdk.Kiota.Admin.Models.OrganizationRepresentation body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task PutAsync(global::PhaseTwo.AuthServices.Sdk.Kiota.Admin.Models.OrganizationRepresentation body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPutRequestInformation(body, requestConfiguration);
            await RequestAdapter.SendNoContentAsync(requestInfo, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Delete the organization
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToDeleteRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToDeleteRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.DELETE, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            return requestInfo;
        }
        /// <summary>
        /// Get organization by id
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Update this organization by id
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPutRequestInformation(global::PhaseTwo.AuthServices.Sdk.Kiota.Admin.Models.OrganizationRepresentation body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPutRequestInformation(global::PhaseTwo.AuthServices.Sdk.Kiota.Admin.Models.OrganizationRepresentation body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.PUT, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="WithOrgItemRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::PhaseTwo.AuthServices.Sdk.Kiota.Admin.Admin.Orgs.Item.WithOrgItemRequestBuilder WithUrl(string rawUrl)
        {
            return new global::PhaseTwo.AuthServices.Sdk.Kiota.Admin.Admin.Orgs.Item.WithOrgItemRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WithOrgItemRequestBuilderDeleteRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WithOrgItemRequestBuilderGetRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WithOrgItemRequestBuilderPutRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618
