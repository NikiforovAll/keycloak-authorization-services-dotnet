// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using PhaseTwo.AuthServices.Sdk.Kiota.Admin.Models;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace PhaseTwo.AuthServices.Sdk.Kiota.Admin.Admin.Orgs.Item.PortalLink
{
    /// <summary>
    /// Builds and executes requests for operations under \{realm}\orgs\{orgId}\portal-link
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class PortalLinkRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="PortalLinkRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public PortalLinkRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/{realm}/orgs/{orgId}/portal-link", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="PortalLinkRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public PortalLinkRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/{realm}/orgs/{orgId}/portal-link", rawUrl)
        {
        }
        /// <summary>
        /// Create a link for this organizations admin portal. This link encodes an action token on behalf of the organization&apos;s default admin user, or the user that is optionally specified in this request. The user specified must be a member of this organization, and have full organization admin roles.
        /// </summary>
        /// <returns>A <see cref="global::PhaseTwo.AuthServices.Sdk.Kiota.Admin.Models.PortalLinkRepresentation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::PhaseTwo.AuthServices.Sdk.Kiota.Admin.Models.PortalLinkRepresentation?> PostAsync(global::PhaseTwo.AuthServices.Sdk.Kiota.Admin.Admin.Orgs.Item.PortalLink.PortalLinkPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::PhaseTwo.AuthServices.Sdk.Kiota.Admin.Models.PortalLinkRepresentation> PostAsync(global::PhaseTwo.AuthServices.Sdk.Kiota.Admin.Item.Orgs.Item.PortalLink.PortalLinkPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            return await RequestAdapter.SendAsync<global::PhaseTwo.AuthServices.Sdk.Kiota.Admin.Models.PortalLinkRepresentation>(requestInfo, global::PhaseTwo.AuthServices.Sdk.Kiota.Admin.Models.PortalLinkRepresentation.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Create a link for this organizations admin portal. This link encodes an action token on behalf of the organization&apos;s default admin user, or the user that is optionally specified in this request. The user specified must be a member of this organization, and have full organization admin roles.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::PhaseTwo.AuthServices.Sdk.Kiota.Admin.Admin.Orgs.Item.PortalLink.PortalLinkPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::PhaseTwo.AuthServices.Sdk.Kiota.Admin.Item.Orgs.Item.PortalLink.PortalLinkPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/x-www-form-urlencoded", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="PortalLinkRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::PhaseTwo.AuthServices.Sdk.Kiota.Admin.Admin.Orgs.Item.PortalLink.PortalLinkRequestBuilder WithUrl(string rawUrl)
        {
            return new global::PhaseTwo.AuthServices.Sdk.Kiota.Admin.Admin.Orgs.Item.PortalLink.PortalLinkRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class PortalLinkRequestBuilderPostRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618
